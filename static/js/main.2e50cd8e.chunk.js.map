{"version":3,"sources":["serviceWorker.ts","pages/Home.tsx","util/TruncateString.tsx","components/cards/LauchCard.tsx","pages/Launches.tsx","components/Main.tsx","components/Nav.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Home","truncateString","str","words","split","splice","join","LaunchCard","launch","className","mission_name","details","Launches","useQuery","gql","loading","error","data","launchesPast","map","key","id","Main","exact","path","component","Nav","icon","faPlanetRinged","to","activeClassName","faHouse","faRocket","App","client","ApolloClient","uri","cache","InMemoryCache","render","StrictMode","ApolloProvider","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTSC,EANF,WACT,OACI,yC,wBCDOC,EAJQ,SAACC,EAAaC,GACjC,OAAOD,EAAIE,MAAM,KAAKC,OAAO,EAAGF,GAAOG,KAAK,MCmBjCC,EAfI,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACI,yBAAKC,UAAU,2CACX,yBAAKA,UAAU,qCACX,yBAAKA,UAAU,QACX,wBAAIA,UAAU,wCAAwCD,EAAOE,cAC7D,uBAAGD,UAAU,2BAA2BR,EAAeO,EAAOG,QAAS,S,4QCN3F,IA8CeC,EA9CE,WAAO,IAAD,EACYC,YAASC,YAAA,MAAjCC,EADY,EACZA,QAASC,EADG,EACHA,MAAOC,EADJ,EACIA,KAiBvB,OAAIF,EAAgB,yCAChBC,EAAc,uCAKd,yBAAKP,UAAU,uBAGPQ,EAAKC,aAAaC,KAAI,SAAAX,GAAM,OACxB,kBAAC,EAAD,CAAYA,OAAQA,EAAQY,IAAKZ,EAAOa,UClB7CC,EATF,WACT,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzB,IACjC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,YAAYC,UAAWb,M,wBCuBtCc,EA3BH,WACR,OACI,yBAAKjB,UAAU,kEAEX,yBAAKA,UAAU,4CACX,kBAAC,IAAD,CAAiBkB,KAAMC,OAG3B,wBAAInB,UAAU,0CAEV,kBAAC,IAAD,CAASoB,GAAG,IAAIC,gBAAgB,gBAAgBP,OAAK,EAACd,UAAU,+FAC5D,kBAAC,IAAD,CAAiBkB,KAAMI,MAEvB,0BAAMtB,UAAU,gBAAhB,SAGJ,kBAAC,IAAD,CAASoB,GAAG,YAAYC,gBAAgB,gBAAgBrB,UAAU,+FAC9D,kBAAC,IAAD,CAAiBkB,KAAMK,MAEvB,0BAAMvB,UAAU,gBAAhB,gBCRLwB,MAbf,WACI,OACI,yBAAKxB,UAAU,wCACX,kBAAC,EAAD,MACA,0BACIA,UAAU,0HAEV,kBAAC,EAAD,SCKVyB,G,MAAS,IAAIC,IAAa,CAC5BC,IAAK,mCACLC,MAAO,IAAIC,OAGfC,iBACI,kBAAC,IAAMC,WAAP,KACI,kBAACC,EAAA,EAAD,CAAgBP,OAAQA,GACpB,kBAAC,IAAD,CAAeQ,SAAUC,kBACrB,kBAAC,EAAD,SAIZC,SAASC,eAAe,SR8GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.2e50cd8e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n\nconst Home = () => {\n    return (\n        <h1>Homepage</h1>\n    );\n}\n\nexport default Home;","const truncateString = (str: string, words: number) => {\n    return str.split(\" \").splice(0, words).join(\" \");\n}\n\nexport default truncateString;","import React from 'react';\nimport truncateString from \"../../util/TruncateString\";\n\n\n// @ts-ignore\nconst LaunchCard = ({launch}) => {\n    return (\n        <div className=\"w-full sm:w-1/2 lg:w-1/4 flex mb-4 px-2\">\n            <div className=\"flex-1 rounded bg-white shadow-lg\">\n                <div className=\"p-10\">\n                    <h3 className=\"mb-2 text-xl font-bold text-blue-600\">{launch.mission_name}</h3>\n                    <p className=\"text-gray-700 font-mono\">{truncateString(launch.details, 20)}</p>\n                </div>\n\n            </div>\n        </div>\n\n    );\n}\n\nexport default LaunchCard;","import React from 'react';\nimport {gql, useQuery} from \"@apollo/client\";\nimport LaunchCard from \"../components/cards/LauchCard\";\n\n\nconst Launches = () => {\n    const {loading, error, data} = useQuery(gql`\n    {\n  launchesPast(limit: 10) {\n    id\n    launch_date_local\n    launch_site {\n      site_name_long\n    }\n    links {\n      flickr_images\n    }\n    details\n    mission_name\n  }\n}\n  `);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n\n    return (\n\n        <div className=\"flex flex-wrap mb-4\">\n            {\n                // @ts-ignore\n                data.launchesPast.map(launch => (\n                    <LaunchCard launch={launch} key={launch.id}/>\n                ))\n            }\n        </div>\n        // @ts-ignore\n\n    );\n\n\n    // @ts-ignore\n\n\n\n    // return (\n    //     <h1>Launches</h1>\n    // );\n}\n\nexport default Launches;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from \"../pages/Home\";\nimport Launches from \"../pages/Launches\";\n\n\nconst Main = () => {\n    return (\n        <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route exact path=\"/launches\" component={Launches}/>\n        </Switch>\n    );\n}\n\nexport default Main;","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faHouse, faPlanetRinged, faRocket} from \"@fortawesome/pro-regular-svg-icons\";\nimport {NavLink} from 'react-router-dom';\n\n\nconst Nav = () => {\n    return (\n        <nav className=\"w-24 flex flex-col items-center bg-white dark:bg-gray-800 py-4\">\n\n            <div className=\"text-blue-600 dark:text-blue-300 text-xl\">\n                <FontAwesomeIcon icon={faPlanetRinged}/>\n            </div>\n\n            <ul className=\"mt-2 text-gray-700 dark:text-gray-400 \">\n\n                <NavLink to=\"/\" activeClassName=\"text-blue-600\" exact className=\"mt-3 p-2 hover:text-blue-600 dark-hover:text-blue-300 rounded-lg flex flex-col items-center\">\n                    <FontAwesomeIcon icon={faHouse}/>\n\n                    <span className=\"text-xs mt-2\">Home</span>\n                </NavLink>\n\n                <NavLink to=\"/launches\" activeClassName=\"text-blue-600\" className=\"mt-3 p-2 hover:text-blue-600 dark-hover:text-blue-300 rounded-lg flex flex-col items-center\">\n                    <FontAwesomeIcon icon={faRocket}/>\n\n                    <span className=\"text-xs mt-2\">Launches</span>\n                </NavLink>\n\n            </ul>\n        </nav>\n    );\n}\n\nexport default Nav;","import React from 'react';\nimport Main from \"./components/Main\";\nimport Nav from \"./components/Nav\";\n\nfunction App() {\n    return (\n        <div className=\"h-screen w-full flex overflow-hidden\">\n            <Nav/>\n            <main\n                className=\"my-1 pt-2 pb-2 px-10 flex-1 bg-gray-200 dark:bg-black rounded-l-lg\n    transition duration-500 ease-in-out overflow-y-auto\">\n                <Main/>\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport {render} from \"react-dom\";\n\n\nimport {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n} from \"@apollo/client\";\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport './assets/main.css'\n\n\nconst client = new ApolloClient({\n    uri: \"https://api.spacex.land/graphql/\",\n    cache: new InMemoryCache()\n});\n\nrender(\n    <React.StrictMode>\n        <ApolloProvider client={client}>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <App/>\n            </BrowserRouter>\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}